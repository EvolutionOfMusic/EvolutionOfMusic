	component Evo_Synth is
		port (
			tristate_conduit_bridge_0_out_generic_tristate_controller_0_tcm_read_n_out       : out   std_logic_vector(0 downto 0);                     -- generic_tristate_controller_0_tcm_read_n_out
			tristate_conduit_bridge_0_out_generic_tristate_controller_0_tcm_data_out         : inout std_logic_vector(7 downto 0)  := (others => 'X'); -- generic_tristate_controller_0_tcm_data_out
			tristate_conduit_bridge_0_out_generic_tristate_controller_0_tcm_chipselect_n_out : out   std_logic_vector(0 downto 0);                     -- generic_tristate_controller_0_tcm_chipselect_n_out
			tristate_conduit_bridge_0_out_generic_tristate_controller_0_tcm_write_n_out      : out   std_logic_vector(0 downto 0);                     -- generic_tristate_controller_0_tcm_write_n_out
			tristate_conduit_bridge_0_out_generic_tristate_controller_0_tcm_address_out      : out   std_logic_vector(21 downto 0);                    -- generic_tristate_controller_0_tcm_address_out
			triple_speed_ethernet_0_transmit_data                                            : in    std_logic_vector(31 downto 0) := (others => 'X'); -- data
			triple_speed_ethernet_0_transmit_endofpacket                                     : in    std_logic                     := 'X';             -- endofpacket
			triple_speed_ethernet_0_transmit_error                                           : in    std_logic                     := 'X';             -- error
			triple_speed_ethernet_0_transmit_empty                                           : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- empty
			triple_speed_ethernet_0_transmit_ready                                           : out   std_logic;                                        -- ready
			triple_speed_ethernet_0_transmit_startofpacket                                   : in    std_logic                     := 'X';             -- startofpacket
			triple_speed_ethernet_0_transmit_valid                                           : in    std_logic                     := 'X';             -- valid
			triple_speed_ethernet_0_receive_data                                             : out   std_logic_vector(31 downto 0);                    -- data
			triple_speed_ethernet_0_receive_valid                                            : out   std_logic;                                        -- valid
			triple_speed_ethernet_0_receive_endofpacket                                      : out   std_logic;                                        -- endofpacket
			triple_speed_ethernet_0_receive_empty                                            : out   std_logic_vector(1 downto 0);                     -- empty
			triple_speed_ethernet_0_receive_ready                                            : in    std_logic                     := 'X';             -- ready
			triple_speed_ethernet_0_receive_startofpacket                                    : out   std_logic;                                        -- startofpacket
			triple_speed_ethernet_0_receive_error                                            : out   std_logic_vector(5 downto 0);                     -- error
			clk_0_clk_in_clk                                                                 : in    std_logic                     := 'X';             -- clk
			audio_0_external_interface_ADCDAT                                                : in    std_logic                     := 'X';             -- ADCDAT
			audio_0_external_interface_ADCLRCK                                               : in    std_logic                     := 'X';             -- ADCLRCK
			audio_0_external_interface_BCLK                                                  : in    std_logic                     := 'X';             -- BCLK
			audio_0_external_interface_DACDAT                                                : out   std_logic;                                        -- DACDAT
			audio_0_external_interface_DACLRCK                                               : in    std_logic                     := 'X';             -- DACLRCK
			audio_0_avalon_right_channel_source_ready                                        : in    std_logic                     := 'X';             -- ready
			audio_0_avalon_right_channel_source_data                                         : out   std_logic_vector(31 downto 0);                    -- data
			audio_0_avalon_right_channel_source_valid                                        : out   std_logic                                         -- valid
		);
	end component Evo_Synth;

